"""
The Static Report Generator.

This module is responsible for synthesizing the various analyses performed on the
codebase into a single, human-readable Markdown report. It acts as the final
presentation layer for the insights gathered by the ingestion and ranking modules.

The primary function, `generate_report`, orchestrates this process. It:
1. Loads a pre-computed CodeGraph from a file.
2. Uses the `ranking` module to identify the most central/important components.
3. Assembles these findings into a structured Markdown string, complete with
   headers, tables, and formatted code snippets.

This generated report is the first tangible, user-facing asset produced by the
Codex Veritas system, providing an immediate "at-a-glance" understanding of a
complex codebase.
"""

from pathlib import Path
from typing import List, Dict, Any

from rich.console import Console
from rich.table import Table

# --- Local Imports ---
from ..graph.core import CodeGraph
from .ranking import rank_nodes_by_centrality

# --- Helper Functions ---

def _format_node_for_table(node: Dict[str, Any]) -> tuple:
    """Formats a graph node's data for display in a Rich table."""
    name = node.get("name", "N/A")
    node_type = node.get("type", "N/A")
    
    file_path_str = node.get("file_path", "N/A")
    # Attempt to shorten the file path for readability
    try:
        path = Path(file_path_str)
        # Show the last 2 parts of the path, e.g., 'src/flask/app.py'
        display_path = "/".join(path.parts[-3:])
    except Exception:
        display_path = file_path_str

    start = node.get('start_line', '?')
    end = node.get('end_line', '?')
    lines = f"{start}-{end}"
    
    return name, node_type, display_path, lines

# --- Core Report Generation Logic ---

def generate_report(graph: CodeGraph) -> str:
    """
    Generates a comprehensive Markdown report from a CodeGraph.

    Args:
        graph: The CodeGraph instance to generate the report from.

    Returns:
        A string containing the full Markdown report.
    """
    report_parts = []

    # 1. Report Header
    report_parts.append("# Codex Veritas: Automated Codebase Guide")
    report_parts.append(
        "This report was automatically generated by Codex Veritas. "
        "It provides a high-level overview of the codebase's architecture and identifies its key components."
    )

    # 2. Architectural Summary
    report_parts.append("\n## üèõÔ∏è Architectural Summary")
    num_nodes = len(graph.graph.nodes)
    num_edges = len(graph.graph.edges)
    
    summary_table = (
        f"| Metric                | Value |\n"
        f"|-----------------------|-------|\n"
        f"| Total Files Analyzed  | {len(set(n.get('file_path') for _, n in graph.graph.nodes(data=True)))} |\n"
        f"| Identified Components | {num_nodes} |\n"
        f"| Identified Relations  | {num_edges} |"
    )
    report_parts.append(summary_table)

    # 3. Key Components Analysis
    report_parts.append("\n## üåü Key Architectural Components")
    report_parts.append(
        "The following components have been identified as the most central and influential "
        "based on their connections within the codebase (using PageRank algorithm)."
    )
    
    key_components = rank_nodes_by_centrality(graph, top_n=15)
    
    if key_components:
        # Create a Rich Table for beautiful console output
        table = Table(title="Top 15 Most Central Components")
        table.add_column("Name", style="cyan", no_wrap=True)
        table.add_column("Type", style="magenta")
        table.add_column("File Path", style="green")
        table.add_column("Lines", justify="right", style="yellow")

        for node in key_components:
            table.add_row(*_format_node_for_table(node))
            
        # Capture the console output of the table to a string
        console = Console(record=True, width=120)
        console.print(table)
        table_str = console.export_text()
        
        # Add the captured table string to the report, formatted as a code block
        report_parts.append(f"\n```\n{table_str}\n```")
    else:
        report_parts.append("\n- No key components could be determined from the graph.")

    # 4. Report Footer
    report_parts.append("\n---\n*End of Report*")

    return "\n".join(report_parts)
